// Generated by gencpp from file balboa_core/balboaLL.msg
// DO NOT EDIT!


#ifndef BALBOA_CORE_MESSAGE_BALBOALL_H
#define BALBOA_CORE_MESSAGE_BALBOALL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace balboa_core
{
template <class ContainerAllocator>
struct balboaLL_
{
  typedef balboaLL_<ContainerAllocator> Type;

  balboaLL_()
    : header()
    , arduinoMillis(0)
    , batteryMillivolts(0)
    , angleY(0)
    , angleX(0)
    , angleZ(0)
    , driveLeft(0)
    , driveRight(0)
    , speedLeft(0)
    , speedRight(0)
    , distanceLeft(0)
    , distanceRight(0)
    , IRsensor1(0)
    , IRsensor2(0)
    , IRsensor3(0)
    , IRsensor4(0)
    , IRsensor5(0)
    , rangeSensor(0)  {
    }
  balboaLL_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , arduinoMillis(0)
    , batteryMillivolts(0)
    , angleY(0)
    , angleX(0)
    , angleZ(0)
    , driveLeft(0)
    , driveRight(0)
    , speedLeft(0)
    , speedRight(0)
    , distanceLeft(0)
    , distanceRight(0)
    , IRsensor1(0)
    , IRsensor2(0)
    , IRsensor3(0)
    , IRsensor4(0)
    , IRsensor5(0)
    , rangeSensor(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _arduinoMillis_type;
  _arduinoMillis_type arduinoMillis;

   typedef int32_t _batteryMillivolts_type;
  _batteryMillivolts_type batteryMillivolts;

   typedef int32_t _angleY_type;
  _angleY_type angleY;

   typedef int32_t _angleX_type;
  _angleX_type angleX;

   typedef int32_t _angleZ_type;
  _angleZ_type angleZ;

   typedef int32_t _driveLeft_type;
  _driveLeft_type driveLeft;

   typedef int32_t _driveRight_type;
  _driveRight_type driveRight;

   typedef int32_t _speedLeft_type;
  _speedLeft_type speedLeft;

   typedef int32_t _speedRight_type;
  _speedRight_type speedRight;

   typedef int32_t _distanceLeft_type;
  _distanceLeft_type distanceLeft;

   typedef int32_t _distanceRight_type;
  _distanceRight_type distanceRight;

   typedef int32_t _IRsensor1_type;
  _IRsensor1_type IRsensor1;

   typedef int32_t _IRsensor2_type;
  _IRsensor2_type IRsensor2;

   typedef int32_t _IRsensor3_type;
  _IRsensor3_type IRsensor3;

   typedef int32_t _IRsensor4_type;
  _IRsensor4_type IRsensor4;

   typedef int32_t _IRsensor5_type;
  _IRsensor5_type IRsensor5;

   typedef int32_t _rangeSensor_type;
  _rangeSensor_type rangeSensor;





  typedef boost::shared_ptr< ::balboa_core::balboaLL_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::balboa_core::balboaLL_<ContainerAllocator> const> ConstPtr;

}; // struct balboaLL_

typedef ::balboa_core::balboaLL_<std::allocator<void> > balboaLL;

typedef boost::shared_ptr< ::balboa_core::balboaLL > balboaLLPtr;
typedef boost::shared_ptr< ::balboa_core::balboaLL const> balboaLLConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::balboa_core::balboaLL_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::balboa_core::balboaLL_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::balboa_core::balboaLL_<ContainerAllocator1> & lhs, const ::balboa_core::balboaLL_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.arduinoMillis == rhs.arduinoMillis &&
    lhs.batteryMillivolts == rhs.batteryMillivolts &&
    lhs.angleY == rhs.angleY &&
    lhs.angleX == rhs.angleX &&
    lhs.angleZ == rhs.angleZ &&
    lhs.driveLeft == rhs.driveLeft &&
    lhs.driveRight == rhs.driveRight &&
    lhs.speedLeft == rhs.speedLeft &&
    lhs.speedRight == rhs.speedRight &&
    lhs.distanceLeft == rhs.distanceLeft &&
    lhs.distanceRight == rhs.distanceRight &&
    lhs.IRsensor1 == rhs.IRsensor1 &&
    lhs.IRsensor2 == rhs.IRsensor2 &&
    lhs.IRsensor3 == rhs.IRsensor3 &&
    lhs.IRsensor4 == rhs.IRsensor4 &&
    lhs.IRsensor5 == rhs.IRsensor5 &&
    lhs.rangeSensor == rhs.rangeSensor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::balboa_core::balboaLL_<ContainerAllocator1> & lhs, const ::balboa_core::balboaLL_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace balboa_core

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::balboa_core::balboaLL_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::balboa_core::balboaLL_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::balboa_core::balboaLL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::balboa_core::balboaLL_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::balboa_core::balboaLL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::balboa_core::balboaLL_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::balboa_core::balboaLL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36b86d230f7daf8cf20eff01d9c0432f";
  }

  static const char* value(const ::balboa_core::balboaLL_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36b86d230f7daf8cULL;
  static const uint64_t static_value2 = 0xf20eff01d9c0432fULL;
};

template<class ContainerAllocator>
struct DataType< ::balboa_core::balboaLL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "balboa_core/balboaLL";
  }

  static const char* value(const ::balboa_core::balboaLL_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::balboa_core::balboaLL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int32 arduinoMillis\n"
"int32 batteryMillivolts\n"
"int32 angleY\n"
"int32 angleX\n"
"int32 angleZ\n"
"int32 driveLeft\n"
"int32 driveRight\n"
"int32 speedLeft\n"
"int32 speedRight\n"
"int32 distanceLeft\n"
"int32 distanceRight\n"
"int32 IRsensor1 ## Added by group ##\n"
"int32 IRsensor2 ## Added by group ##\n"
"int32 IRsensor3 ## Added by group ##\n"
"int32 IRsensor4 ## Added by group ##\n"
"int32 IRsensor5 ## Added by group ##\n"
"int32 rangeSensor ## Added by group ##\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::balboa_core::balboaLL_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::balboa_core::balboaLL_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.arduinoMillis);
      stream.next(m.batteryMillivolts);
      stream.next(m.angleY);
      stream.next(m.angleX);
      stream.next(m.angleZ);
      stream.next(m.driveLeft);
      stream.next(m.driveRight);
      stream.next(m.speedLeft);
      stream.next(m.speedRight);
      stream.next(m.distanceLeft);
      stream.next(m.distanceRight);
      stream.next(m.IRsensor1);
      stream.next(m.IRsensor2);
      stream.next(m.IRsensor3);
      stream.next(m.IRsensor4);
      stream.next(m.IRsensor5);
      stream.next(m.rangeSensor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct balboaLL_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::balboa_core::balboaLL_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::balboa_core::balboaLL_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "arduinoMillis: ";
    Printer<int32_t>::stream(s, indent + "  ", v.arduinoMillis);
    s << indent << "batteryMillivolts: ";
    Printer<int32_t>::stream(s, indent + "  ", v.batteryMillivolts);
    s << indent << "angleY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angleY);
    s << indent << "angleX: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angleX);
    s << indent << "angleZ: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angleZ);
    s << indent << "driveLeft: ";
    Printer<int32_t>::stream(s, indent + "  ", v.driveLeft);
    s << indent << "driveRight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.driveRight);
    s << indent << "speedLeft: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speedLeft);
    s << indent << "speedRight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speedRight);
    s << indent << "distanceLeft: ";
    Printer<int32_t>::stream(s, indent + "  ", v.distanceLeft);
    s << indent << "distanceRight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.distanceRight);
    s << indent << "IRsensor1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.IRsensor1);
    s << indent << "IRsensor2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.IRsensor2);
    s << indent << "IRsensor3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.IRsensor3);
    s << indent << "IRsensor4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.IRsensor4);
    s << indent << "IRsensor5: ";
    Printer<int32_t>::stream(s, indent + "  ", v.IRsensor5);
    s << indent << "rangeSensor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rangeSensor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BALBOA_CORE_MESSAGE_BALBOALL_H
