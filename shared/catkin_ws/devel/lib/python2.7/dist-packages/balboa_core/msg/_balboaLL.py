# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from balboa_core/balboaLL.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class balboaLL(genpy.Message):
  _md5sum = "36b86d230f7daf8cf20eff01d9c0432f"
  _type = "balboa_core/balboaLL"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

int32 arduinoMillis
int32 batteryMillivolts
int32 angleY
int32 angleX
int32 angleZ
int32 driveLeft
int32 driveRight
int32 speedLeft
int32 speedRight
int32 distanceLeft
int32 distanceRight
int32 IRsensor1 ## Added by group ##
int32 IRsensor2 ## Added by group ##
int32 IRsensor3 ## Added by group ##
int32 IRsensor4 ## Added by group ##
int32 IRsensor5 ## Added by group ##
int32 rangeSensor ## Added by group ##

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','arduinoMillis','batteryMillivolts','angleY','angleX','angleZ','driveLeft','driveRight','speedLeft','speedRight','distanceLeft','distanceRight','IRsensor1','IRsensor2','IRsensor3','IRsensor4','IRsensor5','rangeSensor']
  _slot_types = ['std_msgs/Header','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,arduinoMillis,batteryMillivolts,angleY,angleX,angleZ,driveLeft,driveRight,speedLeft,speedRight,distanceLeft,distanceRight,IRsensor1,IRsensor2,IRsensor3,IRsensor4,IRsensor5,rangeSensor

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(balboaLL, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.arduinoMillis is None:
        self.arduinoMillis = 0
      if self.batteryMillivolts is None:
        self.batteryMillivolts = 0
      if self.angleY is None:
        self.angleY = 0
      if self.angleX is None:
        self.angleX = 0
      if self.angleZ is None:
        self.angleZ = 0
      if self.driveLeft is None:
        self.driveLeft = 0
      if self.driveRight is None:
        self.driveRight = 0
      if self.speedLeft is None:
        self.speedLeft = 0
      if self.speedRight is None:
        self.speedRight = 0
      if self.distanceLeft is None:
        self.distanceLeft = 0
      if self.distanceRight is None:
        self.distanceRight = 0
      if self.IRsensor1 is None:
        self.IRsensor1 = 0
      if self.IRsensor2 is None:
        self.IRsensor2 = 0
      if self.IRsensor3 is None:
        self.IRsensor3 = 0
      if self.IRsensor4 is None:
        self.IRsensor4 = 0
      if self.IRsensor5 is None:
        self.IRsensor5 = 0
      if self.rangeSensor is None:
        self.rangeSensor = 0
    else:
      self.header = std_msgs.msg.Header()
      self.arduinoMillis = 0
      self.batteryMillivolts = 0
      self.angleY = 0
      self.angleX = 0
      self.angleZ = 0
      self.driveLeft = 0
      self.driveRight = 0
      self.speedLeft = 0
      self.speedRight = 0
      self.distanceLeft = 0
      self.distanceRight = 0
      self.IRsensor1 = 0
      self.IRsensor2 = 0
      self.IRsensor3 = 0
      self.IRsensor4 = 0
      self.IRsensor5 = 0
      self.rangeSensor = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17i().pack(_x.arduinoMillis, _x.batteryMillivolts, _x.angleY, _x.angleX, _x.angleZ, _x.driveLeft, _x.driveRight, _x.speedLeft, _x.speedRight, _x.distanceLeft, _x.distanceRight, _x.IRsensor1, _x.IRsensor2, _x.IRsensor3, _x.IRsensor4, _x.IRsensor5, _x.rangeSensor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.arduinoMillis, _x.batteryMillivolts, _x.angleY, _x.angleX, _x.angleZ, _x.driveLeft, _x.driveRight, _x.speedLeft, _x.speedRight, _x.distanceLeft, _x.distanceRight, _x.IRsensor1, _x.IRsensor2, _x.IRsensor3, _x.IRsensor4, _x.IRsensor5, _x.rangeSensor,) = _get_struct_17i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17i().pack(_x.arduinoMillis, _x.batteryMillivolts, _x.angleY, _x.angleX, _x.angleZ, _x.driveLeft, _x.driveRight, _x.speedLeft, _x.speedRight, _x.distanceLeft, _x.distanceRight, _x.IRsensor1, _x.IRsensor2, _x.IRsensor3, _x.IRsensor4, _x.IRsensor5, _x.rangeSensor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.arduinoMillis, _x.batteryMillivolts, _x.angleY, _x.angleX, _x.angleZ, _x.driveLeft, _x.driveRight, _x.speedLeft, _x.speedRight, _x.distanceLeft, _x.distanceRight, _x.IRsensor1, _x.IRsensor2, _x.IRsensor3, _x.IRsensor4, _x.IRsensor5, _x.rangeSensor,) = _get_struct_17i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17i = None
def _get_struct_17i():
    global _struct_17i
    if _struct_17i is None:
        _struct_17i = struct.Struct("<17i")
    return _struct_17i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
